%% Generate STIP
VIDDIR = 'Z:\Summer Project\You can (not) redo\DATA\ViF Dataset\Videos - Copy';
addpath(genpath(VIDDIR))

addpath(genpath('Z:\Summer Project\You can (not) redo\Implementation\Testing\'));
addpath(genpath('Z:\Summer Project\You can (not) redo\Implementation\Region Extraction\'));
addpath(genpath('Z:\Summer Project\You can (not) redo\Implementation\Motion Extraction\'));
addpath(genpath('Z:\Summer Project\You can (not) redo\Implementation\Motion Description\'));
addpath(genpath('Z:\Summer Project\You can (not) redo\Implementation\Misc\'));
addpath(genpath('Z:\Summer Project\You can (not) redo\Implementation\Machine Learning\'));
addpath('Z:\Summer Project\You can (not) redo\Implementation\');
addpath(genpath('Z:\Summer Project\You can (not) redo\Implementation\vlfeat-0.9.16\'));
addpath('Z:\Summer Project\You can (not) redo\DATA\Hockey DataSet\')

vl_setup;
%% Generate Video List
VIDLIST = vidListGenFNHockey( 'Z:\Summer Project\You can (not) redo\DATA\ViF Dataset\SIFTFlows\');

%% Create an output directory for the features
STIPOUT = 'VIFDATA';
% if (~exist(STIPOUT,'dir'))
%     disp('Not Exist');
%     mkdir([STIPOUT]);
% end
%
% for i = 1: length(VIDLIST)
%     [PATHSTR,NAME,EXT] = fileparts(VIDLIST{i,1});
%     % Only Seems to work if the video is in the same dir as stipdet.exe
%     copyfile([VIDDIR,'\',NAME,'.avi'],['stip\bin\',NAME,'.avi'])
%     system(['stip\bin\stipdet.exe -vis no -f ',NAME,'.avi -o ',STIPOUT,'\', NAME ,'-STIP.txt']);
%     % Don't need the copy anymore so delete it
%     delete(['stip\bin\',NAME,'.avi']);
% end

OUTPUT ='vas';
if ~exist(OUTPUT ,'dir')
    mkdir(OUTPUT);
end


WORDS = 3000;
TrainNum = 150000;

subName = ['WORDS-',num2str(WORDS),',TN-',num2str(TrainNum)];

%% Read all stip data
descriptors = cell(length(VIDLIST),4);
for i = 1: length(VIDLIST)
    disp(['Loading STIPS ',num2str(i)]);
    [PATHSTR,NAME,EXT] = fileparts(VIDLIST{i,1});
    [pos,val,dscr]=readstips_text([STIPOUT,'\', NAME ,'-STIP.txt']);
    descriptors{i,1} = pos;   % Feature Position
    descriptors{i,2} = val;   % Feature ????
    descriptors{i,3} = dscr;  % Feature HOGHOF (167 vector)
    descriptors{i,4} = zeros(1,WORDS); % Allocate Histogram
end


%% All Tests use 5 fold cross validation

D = cell(length(VIDLIST),1);

for i = 1 : length(VIDLIST)
    D{i} = [VIDLIST{i,3}];
end
[G GN] = grp2idx(D);

FOLD = 5;
DataSplit = cell(FOLD,5); 
ClassificationPerf = cell(1,FOLD);
FinalDecision = cell(1,FOLD);
Accuracy = cell(1,FOLD);
Probability = cell(1,FOLD);
ActualAnswer = cell(1,FOLD);
Vocab = cell(1,FOLD);
TrainingModel = cell(1,FOLD);
ROC = cell(FOLD,3);

TreeClassificationPerf = cell(1,FOLD);
TreeFinalDecision = cell(1,FOLD);
TreeAccuracy = cell(1,FOLD);
TreeProbability = cell(1,FOLD);
TreeActualAnswer = cell(1,FOLD);
TreeTrainingModel = cell(1,FOLD);
for k = 1 : 5
    %% --------------------------------------------------------------------
    disp(['Starting Test ',num2str(k)]);
    testData = find(str2num([VIDLIST{:,4}]')== k);
    TESTIDX = false(length(VIDLIST),1);
    TESTIDX(testData) = true;
    TRAINDIX = ~TESTIDX;
    
    DataSplit{k,1} = k;
    DataSplit{k,2} = TRAINDIX;
    DataSplit{k,3} = TESTIDX;
    DataSplit{k,4} = G;
    DataSplit{k,5} = GN;
    %% --------------------------------------------------------------------
    disp('Formatting Train Data' );
    TRAINDATA = cell2mat(descriptors(TRAINDIX,3));
    
    
    %% Limit the Data------------------------------------------------------
    if length(TRAINDATA) > TrainNum
        rng(1043243); % seed
        randIndex = randperm(length(TRAINDATA));
        TRAINDATA = TRAINDATA(randIndex(1:TrainNum),:);
    end
    
    %% Generate Vocab------------------------------------------------------
    disp('Creating Vocab' );
    % Create Vocabulary
    %[Vocab,labels,mimdist]=kmeans(TRAINDATA,WORDS);
    Vocab{k} = ML_VocabGeneration(TRAINDATA,WORDS);
    
    clear TRAINDATA testData;
    
    %% Generate word representation----------------------------------------
    % Nearest Neigbours for each video segment
    for i = 1: length(VIDLIST)
        disp(['Nearest Words ',num2str(i)]);
        descriptors{i,4} = ML_NearestWord(  {descriptors{i,3}}, Vocab{k},WORDS );
    end
    
    data = cell2mat(descriptors(:,4));
    
    TEST_PCA( descriptors(:,4),D,[subName,'After Vocab -k-',num2str(k)],[OUTPUT,'/']);
    
    %% CROSS VALIDATION ---------------------------------------------------
    [CPerf,finalDecision,Answer,accuracy,prob_estimates,trainingModel,subROC ]...
        = ML_TwoClassLibSVM(data ,TESTIDX,TRAINDIX,G,GN );
    
    FinalDecision{k} = finalDecision;
    Accuracy{k} = accuracy;
    Probability{k} = prob_estimates;
    ActualAnswer{k} = Answer;
    TrainingModel{k} = trainingModel;
    ClassificationPerf{k} = CPerf;
    ROC(k,:) = subROC;
    
    
   [ r,finalDecision,Answer,accuracy,prob_estimates,svmMo ] = ML_TwoClassForest(data ,TESTIDX,TRAINDIX,G,GN );
   disp('Built Forest');
   TreeFinalDecision{k} = finalDecision;
   TreeAccuracy{k} = accuracy;
   TreeProbability{k} = prob_estimates;
   TreeActualAnswer{k} = Answer;
   TreeTrainingModel{k} = svmMo{:};
   TreeClassificationPerf{k} = r;
    
end

Final = 0;
for i = 1: FOLD
    Final = Final + ClassificationPerf{i}.CorrectRate;
end
Final = Final / FOLD;


save(strcat(OUTPUT,'/',subName,'SVM.mat'),...
    'FinalDecision',...
    'Accuracy',...
    'Probability',...
    'ActualAnswer',...
    'ClassificationPerf',...
    'Final',...
    'DataSplit',...
    'Vocab',...
    '-v7.3');
    
save(strcat(OUTPUT,'/',subName,'RF.mat'),...
    'TrainingModel',...
    'TreeFinalDecision',...
    'TreeAccuracy',...
    'TreeProbability',...
    'TreeActualAnswer',...
    'TreeTrainingModel',...
    'TreeClassificationPerf',...
    'DataSplit',...
    'Vocab',...
    '-v7.3');